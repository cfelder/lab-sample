apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: webserver-build
spec:

  workspaces:
  - name: shared
  - name: ssh-dir
  - name: dockerconfig

  params:
  - name: IMAGE_NAME
    type: string
    default: registry.straubcloud.de/webserver
  - name: GIT_REPO
    type: string
    default: git@github.com:dstraub/lab-sample.git
  - name: GIT_REVISION
    type: string
    default: main
  - name: GIT_SHORT_REVISION
    type: string
    default: "not_provided"
  - name: STAGE
    type: string
    default: test

  tasks:
  - name: fetch-repo
    taskRef:
      name: git-clone
      kind: ClusterTask
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REVISION)
    - name: verbose
      value: "false"
    workspaces:
    - name: output
      workspace: shared
    - name: ssh-directory
      workspace: ssh-dir

  - name: build-image
    params:
    - name: IMAGE
      value: $(params.IMAGE_NAME)
    - name: CONTEXT
      value: webserver/container
    - name: BUILD_EXTRA_ARGS
      value: --build-arg=WEBSERVER_VERSION=$(params.GIT_SHORT_REVISION) --build-arg=COMMIT=$(tasks.fetch-repo.results.commit)
    taskRef:
      name: buildah
      kind: ClusterTask
    workspaces:
    - name: source
      workspace: shared
    - name: dockerconfig
      workspace: dockerconfig

  - name: update-image
    params:
    - name: IMAGE_NAME
      value: $(params.IMAGE_NAME)@$(tasks.build-image.results.IMAGE_DIGEST)
    - name: CONTAINER_NAME
      value: webserver
    - name: STAGE
      value: $(params.STAGE)
    taskSpec:
      params:
      - name: IMAGE_NAME
        type: string
      - name: CONTAINER_NAME
        type: string
      - name: STAGE
        type: string
      - name: DEBUG
        type: string
        default: "true"
      results:
      - name: CHANGED
        type: string
      steps:
      - name: kustomize
        image: registry.k8s.io/kustomize/kustomize:v5.0.0
        script: |
          cd $(workspaces.source.path)/webserver/kustomize/overlays/$(params.STAGE)
          kustomize edit set image $(params.CONTAINER_NAME)=$(params.IMAGE_NAME)
          [[ "$(params.DEBUG)" == "true" ]] && cat kustomization.yml || true
          echo webserver/kustomize/overlays/$(params.STAGE)/kustomization.yml | tee $(results.CHANGED.path)
      workspaces:
      - name: source
        mountPath: /workspace
    workspaces:
    - name: source
      workspace: shared

  - name: commit-changes
    params:
    - name: GIT_USER_NAME
      value: pipeline
    - name: GIT_USER_EMAIL
      value: pipeline@openshift
    - name: GIT_SCRIPT
      value: |
        git config --global --add safe.directory /workspace/source
        git commit -m "pipeline update" $(tasks.update-image.results.CHANGED)
        git push origin HEAD:main
    - name: VERBOSE
      value: "false" 
    taskRef:
      name: git-cli
      kind: ClusterTask
    workspaces:
    - name: source
      workspace: shared
    - name: ssh-directory
      workspace: ssh-dir

  - name: trigger-argo
    runAfter: 
    - commit-changes
    params:
    - name: application
      value: stage-$(params.STAGE)
    - name: timeout 
      value: "180"
    taskSpec:
      params:
      - name: application
        type: string
      - name: timeout 
        type: string
        default: "60"
      - name: revision
        type: string
        default: HEAD
      stepTemplate:
        envFrom:
        - secretRef:
            name: gitops-admin
      steps:
      - image: quay.io/argoproj/argocd
        script: |
          yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD"
          argocd app sync $(params.application) --revision $(params.revision) --timeout=$(params.timeout)
          argocd app wait $(params.application) --sync  --timeout=$(params.timeout)
          argocd app wait $(params.application) --health  --timeout=$(params.timeout)
      

